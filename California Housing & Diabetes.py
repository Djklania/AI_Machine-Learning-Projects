# -*- coding: utf-8 -*-
"""Εργασία 2 Επικοινωνία ανθρώπου-μηχανής.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hqOK2iGu0gdkQN2cD2Uu6wxXGDt3LhpZ

# California Housing

# Imports
"""

import matplotlib.pyplot as plt
import numpy as np
from sklearn import datasets, linear_model
from sklearn.datasets import fetch_california_housing
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score

"""# Προετοιμασία δεδομένων"""

# Load dataset (X:inputs/features, Y:target)
ds_X, ds_Y = fetch_california_housing(return_X_y=True)

# Split features into training/test sets
ds_X_train = ds_X[:-4000]
ds_X_test = ds_X[-4000:]

# Split targets into training/test sets
ds_Y_train = ds_Y[:-4000]
ds_Y_test = ds_Y[-4000:]

# Initialize linear regression object
regr = linear_model.LinearRegression()

# Construct model using the training sets
regr.fit(ds_X_train, ds_Y_train)

# Produce predictions using the test set
ds_Y_pred = regr.predict(ds_X_test)

# Output learned model coefficients
print("Intercept: \n", regr.intercept_)
print("Coefficients: \n", regr.coef_)

# Output mean squared prediction error
print("Mean square prediction error: %.2f" % mean_squared_error(ds_Y_test, ds_Y_pred))

"""# A) R-Squared"""

#Calculate R-squared
R_squared = r2_score(ds_Y_test, ds_Y_pred)
print("R-squared:",R_squared)

"""# B) Γράφημα Επιδράσεων effect plot"""

#Split ds_X_test into its 8 components for easier graph creation
MedInc = ds_X_test[:,0]
HouseAge = ds_X_test[:,1]
AveRooms = ds_X_test[:,2]
AveBedrms = ds_X_test[:,3]
Population = ds_X_test[:,4]
AveOccup = ds_X_test[:,5]
Latitude = ds_X_test[:,6]
Longitude = ds_X_test[:,7]

# Creating plot
plt.boxplot([MedInc,HouseAge,AveRooms,AveBedrms,Latitude],vert=False,patch_artist=True)
plt.yticks([1,2,3,4,5], ['MedInc','HouseAge','AveRooms','AveBedrms','Latitude'])#Change labels of y-axis
plt.semilogx()#Make a plot with log scaling on the x-axis
plt.show()

# Creating plot
plt.boxplot([Population],vert=False,patch_artist=True)
plt.yticks([1], ['Population'])#Change labels of y-axis
plt.show()

# Creating plot
plt.boxplot([AveOccup],vert=False,patch_artist=True)
plt.yticks([1], ['AveOccup'])#Change labels of y-axis
plt.semilogx()#Make a plot with log scaling on the x-axis
plt.show()

# Creating plot
plt.boxplot([Longitude],vert=False,patch_artist=True)
plt.yticks([1], ['Longitude'])#Change labels of y-axis
plt.xlim([-125,-115])#Set limits on the x-axis
plt.show()

"""# C) Τυχαία επιλεγμένο δείγμα από το σύνολο αξιολόγηση ‘ds_X_test’"""

# Get 10 random samples from ds_X_test
sample = ds_X_test[np.random.choice(ds_X_test.shape[0], 10, replace=False), :]

# Creating plot
plt.boxplot(sample,vert=False,patch_artist=True)
plt.semilogx()#Make a plot with log scaling on the x-axis
plt.show()

# Creating plot
plt.boxplot(sample,vert=False,patch_artist=True)
plt.xlim([-125,-115])#Set limits on the x-axis
plt.show()

"""# Diabetes

# Imports
"""

#Import SHAP and XGBoost method libraries
!pip install shap
import xgboost
import shap

"""# Προετοιμασία δεδομένων"""

#Import diabetes dataset
ds_X, ds_Y = shap.datasets.diabetes()

#Train an XGBoost regression model
model = xgboost.XGBRegressor().fit(ds_X, ds_Y)

#Estimate the SHAP values for each dataset sample
explainer = shap.Explainer(model)
shap_values = explainer(ds_X)

#Define the index of the examined sample for generating local explanations
sample_indx=0

#Visualize sample SHAP values for given example (local explanation)
shap.plots.waterfall(shap_values[sample_indx])

#Visualize (SHAP-based) sample force plot for given example (local explanation)
shap.initjs()
shap.plots.force(shap_values[sample_indx], matplotlib=True)

#Visualize (SHAP-based) summary plot of the effects of all features for all dataset samples (global explanation)
shap.initjs()
shap.plots.beeswarm(shap_values)

#Visualize mean absolute value of SHAP values for each feature for all dataset samples (global explanation)
shap.initjs()
shap.plots.bar(shap_values)

#Visualize interactive (SHAP-based) force plot for all samples in the dataset (global explanation)
shap.initjs()
shap.plots.force(shap_values)

"""# D) Γράφημα τιμών Shapley"""

#Take a random shap_value from range 0-441(max samples=442)
import random
sample = shap_values[random.randint(0,441),:]

shap.initjs()
shap.plots.waterfall(sample)

"""# E) Γράφημα δύναμης"""

shap.initjs()
shap.plots.force(sample, matplotlib=True)

"""# F) Γράφημα περίληψης"""

shap.initjs()
shap.plots.beeswarm(shap_values)

"""# G) Γράφημα μέσης απόλυτης τιμής των τιμών Shapley"""

shap.initjs()
shap.plots.bar(shap_values)

"""# H) Διαδραστικό γράφημα δύναμης για το σύνολο των δειγμάτων"""

shap.initjs()
shap.plots.force(shap_values)